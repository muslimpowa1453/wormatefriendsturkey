(function (t) {
  if (typeof exports == "object" && typeof module != "undefined") {
    module.exports = t();
  } else if (typeof define == "function" && define.amd) {
    define([], t);
  } else {
    var e;
    e = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this;
    e.nipplejs = t();
  }
})(function () {
  function t() {}
  function e(t, i) {
    this.identifier = i.identifier;
    this.position = i.position;
    this.frontPosition = i.frontPosition;
    this.collection = t;
    this.defaults = {
      size: 100,
      threshold: 0.1,
      color: "white",
      fadeTime: 250,
      dataOnly: false,
      restJoystick: true,
      restOpacity: 0.5,
      mode: "dynamic",
      zone: document.body,
      lockX: false,
      lockY: false
    };
    this.config(i);
    if (this.options.mode === "dynamic") {
      this.options.restOpacity = 0;
    }
    this.id = e.id;
    e.id += 1;
    this.buildEl().stylize();
    this.instance = {
      el: this.ui.el,
      on: this.on.bind(this),
      off: this.off.bind(this),
      show: this.show.bind(this),
      hide: this.hide.bind(this),
      add: this.addToDom.bind(this),
      remove: this.removeFromDom.bind(this),
      destroy: this.destroy.bind(this),
      resetDirection: this.resetDirection.bind(this),
      computeDirection: this.computeDirection.bind(this),
      trigger: this.trigger.bind(this),
      position: this.position,
      frontPosition: this.frontPosition,
      ui: this.ui,
      identifier: this.identifier,
      id: this.id,
      options: this.options
    };
    return this.instance;
  }
  function i(t, e) {
    var n = this;
    n.nipples = [];
    n.idles = [];
    n.actives = [];
    n.ids = [];
    n.pressureIntervals = {};
    n.manager = t;
    n.id = i.id;
    i.id += 1;
    n.defaults = {
      zone: document.body,
      multitouch: false,
      maxNumberOfNipples: 10,
      mode: "dynamic",
      position: {
        top: 0,
        left: 0
      },
      catchDistance: 200,
      size: 100,
      threshold: 0.1,
      color: "white",
      fadeTime: 250,
      dataOnly: false,
      restJoystick: true,
      restOpacity: 0.5,
      lockX: false,
      lockY: false
    };
    n.config(e);
    if (n.options.mode === "static" || n.options.mode === "semi") {
      n.options.multitouch = false;
    }
    if (!n.options.multitouch) {
      n.options.maxNumberOfNipples = 1;
    }
    n.updateBox();
    n.prepareNipples();
    n.bindings();
    n.begin();
    return n.nipples;
  }
  function n(t) {
    var e = this;
    e.ids = {};
    e.index = 0;
    e.collections = [];
    e.config(t);
    e.prepareCollections();
    var i;
    c.bindEvt(window, "resize", function (t) {
      clearTimeout(i);
      i = setTimeout(function () {
        var t;
        var i = c.getScroll();
        e.collections.forEach(function (e) {
          e.forEach(function (e) {
            t = e.el.getBoundingClientRect();
            e.position = {
              x: i.x + t.left,
              y: i.y + t.top
            };
          });
        });
      }, 100);
    });
    return e.collections;
  }
  var o;
  var r = !!("ontouchstart" in window);
  var s = !!window.PointerEvent;
  var d = !!window.MSPointerEvent;
  var a = {
    touch: {
      start: "touchstart",
      move: "touchmove",
      end: "touchend, touchcancel"
    },
    mouse: {
      start: "mousedown",
      move: "mousemove",
      end: "mouseup"
    },
    pointer: {
      start: "pointerdown",
      move: "pointermove",
      end: "pointerup, pointercancel"
    },
    MSPointer: {
      start: "MSPointerDown",
      move: "MSPointerMove",
      end: "MSPointerUp"
    }
  };
  var p = {};
  if (s) {
    o = a.pointer;
  } else if (d) {
    o = a.MSPointer;
  } else if (r) {
    o = a.touch;
    p = a.mouse;
  } else {
    o = a.mouse;
  }
  var c = {};
  c.distance = function (t, e) {
    var i = e.x - t.x;
    var n = e.y - t.y;
    return Math.sqrt(i * i + n * n);
  };
  c.angle = function (t, e) {
    var i = e.x - t.x;
    var n = e.y - t.y;
    return c.degrees(Math.atan2(n, i));
  };
  c.findCoord = function (t, e, i) {
    var n = {
      x: 0,
      y: 0
    };
    i = c.radians(i);
    n.x = t.x - e * Math.cos(i);
    n.y = t.y - e * Math.sin(i);
    return n;
  };
  c.radians = function (t) {
    return t * (Math.PI / 180);
  };
  c.degrees = function (t) {
    return t * (180 / Math.PI);
  };
  c.bindEvt = function (t, e, i) {
    var n;
    for (var o = e.split(/[ ,]+/g), r = 0; r < o.length; r += 1) {
      n = o[r];
      if (t.addEventListener) {
        t.addEventListener(n, i, false);
      } else if (t.attachEvent) {
        t.attachEvent(n, i);
      }
    }
  };
  c.unbindEvt = function (t, e, i) {
    var n;
    for (var o = e.split(/[ ,]+/g), r = 0; r < o.length; r += 1) {
      n = o[r];
      if (t.removeEventListener) {
        t.removeEventListener(n, i);
      } else if (t.detachEvent) {
        t.detachEvent(n, i);
      }
    }
  };
  c.trigger = function (t, e, i) {
    var n = new CustomEvent(e, i);
    t.dispatchEvent(n);
  };
  c.prepareEvent = function (t) {
    t.preventDefault();
    if (t.type.match(/^touch/)) {
      return t.changedTouches;
    } else {
      return t;
    }
  };
  c.getScroll = function () {
    return {
      x: window.pageXOffset !== undefined ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft,
      y: window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop
    };
  };
  c.applyPosition = function (t, e) {
    if (e.top || e.right || e.bottom || e.left) {
      t.style.top = e.top;
      t.style.right = e.right;
      t.style.bottom = e.bottom;
      t.style.left = e.left;
    } else {
      t.style.left = e.x + "px";
      t.style.top = e.y + "px";
    }
  };
  c.getTransitionStyle = function (t, e, i) {
    var n = c.configStylePropertyObject(t);
    for (var o in n) {
      if (n.hasOwnProperty(o)) {
        if (typeof e == "string") {
          n[o] = e + " " + i;
        } else {
          var r = "";
          for (var s = 0, d = e.length; s < d; s += 1) {
            r += e[s] + " " + i + ", ";
          }
          n[o] = r.slice(0, -2);
        }
      }
    }
    return n;
  };
  c.getVendorStyle = function (t, e) {
    var i = c.configStylePropertyObject(t);
    for (var n in i) {
      if (i.hasOwnProperty(n)) {
        i[n] = e;
      }
    }
    return i;
  };
  c.configStylePropertyObject = function (t) {
    var e = {
      [t]: ""
    };
    ["webkit", "Moz", "o"].forEach(function (i) {
      e[i + t.charAt(0).toUpperCase() + t.slice(1)] = "";
    });
    return e;
  };
  c.extend = function (t, e) {
    for (var i in e) {
      if (e.hasOwnProperty(i)) {
        t[i] = e[i];
      }
    }
    return t;
  };
  c.safeExtend = function (t, e) {
    var i = {};
    for (var n in t) {
      if (t.hasOwnProperty(n) && e.hasOwnProperty(n)) {
        i[n] = e[n];
      } else if (t.hasOwnProperty(n)) {
        i[n] = t[n];
      }
    }
    return i;
  };
  c.map = function (t, e) {
    if (t.length) {
      for (var i = 0, n = t.length; i < n; i += 1) {
        e(t[i]);
      }
    } else {
      e(t);
    }
  };
  t.prototype.on = function (t, e) {
    var i;
    var n = this;
    var o = t.split(/[ ,]+/g);
    n._handlers_ = n._handlers_ || {};
    for (var r = 0; r < o.length; r += 1) {
      i = o[r];
      n._handlers_[i] = n._handlers_[i] || [];
      n._handlers_[i].push(e);
    }
    return n;
  };
  t.prototype.off = function (t, e) {
    var i = this;
    i._handlers_ = i._handlers_ || {};
    if (t === undefined) {
      i._handlers_ = {};
    } else if (e === undefined) {
      i._handlers_[t] = null;
    } else if (i._handlers_[t] && i._handlers_[t].indexOf(e) >= 0) {
      i._handlers_[t].splice(i._handlers_[t].indexOf(e), 1);
    }
    return i;
  };
  t.prototype.trigger = function (t, e) {
    var i;
    var n = this;
    var o = t.split(/[ ,]+/g);
    n._handlers_ = n._handlers_ || {};
    for (var r = 0; r < o.length; r += 1) {
      i = o[r];
      if (n._handlers_[i] && n._handlers_[i].length) {
        n._handlers_[i].forEach(function (t) {
          t.call(n, {
            type: i,
            target: n
          }, e);
        });
      }
    }
  };
  t.prototype.config = function (t) {
    var e = this;
    e.options = e.defaults || {};
    if (t) {
      e.options = c.safeExtend(e.options, t);
    }
  };
  t.prototype.bindEvt = function (t, e) {
    var i = this;
    i._domHandlers_ = i._domHandlers_ || {};
    i._domHandlers_[e] = function () {
      if (typeof i["on" + e] == "function") {
        i["on" + e].apply(i, arguments);
      } else {
        console.warn("[WARNING] : Missing \"on" + e + "\" handler.");
      }
    };
    c.bindEvt(t, o[e], i._domHandlers_[e]);
    if (p[e]) {
      c.bindEvt(t, p[e], i._domHandlers_[e]);
    }
    return i;
  };
  t.prototype.unbindEvt = function (t, e) {
    var i = this;
    i._domHandlers_ = i._domHandlers_ || {};
    c.unbindEvt(t, o[e], i._domHandlers_[e]);
    if (p[e]) {
      c.unbindEvt(t, p[e], i._domHandlers_[e]);
    }
    delete i._domHandlers_[e];
    return this;
  };
  e.prototype = new t();
  e.constructor = e;
  e.id = 0;
  e.prototype.buildEl = function (t) {
    this.ui = {};
    if (this.options.dataOnly) {
      return this;
    } else {
      this.ui.el = document.createElement("div");
      this.ui.back = document.createElement("div");
      this.ui.front = document.createElement("div");
      this.ui.el.className = "nipple collection_" + this.collection.id;
      this.ui.back.className = "back";
      this.ui.front.className = "front";
      this.ui.el.setAttribute("id", "nipple_" + this.collection.id + "_" + this.id);
      this.ui.el.appendChild(this.ui.back);
      this.ui.el.appendChild(this.ui.front);
      return this;
    }
  };
  e.prototype.stylize = function () {
    if (this.options.dataOnly) {
      return this;
    }
    var t = this.options.fadeTime + "ms";
    var e = c.getVendorStyle("borderRadius", "50%");
    var i = c.getTransitionStyle("transition", "opacity", t);
    var n = {
      el: {
        position: "absolute",
        opacity: this.options.restOpacity,
        display: "block",
        zIndex: 999
      },
      back: {
        position: "absolute",
        display: "block",
        width: this.options.size + "px",
        height: this.options.size + "px",
        marginLeft: -this.options.size / 2 + "px",
        marginTop: -this.options.size / 2 + "px",
        background: this.options.color,
        opacity: ".5"
      },
      front: {
        width: this.options.size / 2 + "px",
        height: this.options.size / 2 + "px",
        position: "absolute",
        display: "block",
        marginLeft: -this.options.size / 4 + "px",
        marginTop: -this.options.size / 4 + "px",
        background: this.options.color,
        opacity: ".5"
      }
    };
    c.extend(n.el, i);
    c.extend(n.back, e);
    c.extend(n.front, e);
    this.applyStyles(n);
    return this;
  };
  e.prototype.applyStyles = function (t) {
    for (var e in this.ui) {
      if (this.ui.hasOwnProperty(e)) {
        for (var i in t[e]) {
          this.ui[e].style[i] = t[e][i];
        }
      }
    }
    return this;
  };
  e.prototype.addToDom = function () {
    if (this.options.dataOnly || document.body.contains(this.ui.el)) {
      return this;
    } else {
      this.options.zone.appendChild(this.ui.el);
      return this;
    }
  };
  e.prototype.removeFromDom = function () {
    if (this.options.dataOnly || !document.body.contains(this.ui.el)) {
      return this;
    } else {
      this.options.zone.removeChild(this.ui.el);
      return this;
    }
  };
  e.prototype.destroy = function () {
    clearTimeout(this.removeTimeout);
    clearTimeout(this.showTimeout);
    clearTimeout(this.restTimeout);
    this.trigger("destroyed", this.instance);
    this.removeFromDom();
    this.off();
  };
  e.prototype.show = function (t) {
    var e = this;
    if (e.options.dataOnly) {
      return e;
    } else {
      clearTimeout(e.removeTimeout);
      clearTimeout(e.showTimeout);
      clearTimeout(e.restTimeout);
      e.addToDom();
      e.restCallback();
      setTimeout(function () {
        e.ui.el.style.opacity = 1;
      }, 0);
      e.showTimeout = setTimeout(function () {
        e.trigger("shown", e.instance);
        if (typeof t == "function") {
          t.call(this);
        }
      }, e.options.fadeTime);
      return e;
    }
  };
  e.prototype.hide = function (t) {
    var e = this;
    if (e.options.dataOnly) {
      return e;
    } else {
      e.ui.el.style.opacity = e.options.restOpacity;
      clearTimeout(e.removeTimeout);
      clearTimeout(e.showTimeout);
      clearTimeout(e.restTimeout);
      e.removeTimeout = setTimeout(function () {
        var i = e.options.mode === "dynamic" ? "none" : "block";
        e.ui.el.style.display = i;
        if (typeof t == "function") {
          t.call(e);
        }
        e.trigger("hidden", e.instance);
      }, e.options.fadeTime);
      if (e.options.restJoystick) {
        e.restPosition();
      }
      return e;
    }
  };
  e.prototype.restPosition = function (t) {
    var e = this;
    e.frontPosition = {
      x: 0,
      y: 0
    };
    var i = e.options.fadeTime + "ms";
    var n = {};
    n.front = c.getTransitionStyle("transition", ["top", "left"], i);
    var o = {
      front: {}
    };
    o.front = {
      left: e.frontPosition.x + "px",
      top: e.frontPosition.y + "px"
    };
    e.applyStyles(n);
    e.applyStyles(o);
    e.restTimeout = setTimeout(function () {
      if (typeof t == "function") {
        t.call(e);
      }
      e.restCallback();
    }, e.options.fadeTime);
  };
  e.prototype.restCallback = function () {
    var t = this;
    var e = {};
    e.front = c.getTransitionStyle("transition", "none", "");
    t.applyStyles(e);
    t.trigger("rested", t.instance);
  };
  e.prototype.resetDirection = function () {
    this.direction = {
      x: false,
      y: false,
      angle: false
    };
  };
  e.prototype.computeDirection = function (t) {
    var e;
    var i;
    var n;
    var o = t.angle.radian;
    var r = Math.PI / 4;
    var s = Math.PI / 2;
    if (o > r && o < r * 3 && !t.lockX) {
      e = "up";
    } else if (o > -r && o <= r && !t.lockY) {
      e = "left";
    } else if (o > -r * 3 && o <= -r && !t.lockX) {
      e = "down";
    } else if (!t.lockY) {
      e = "right";
    }
    if (!t.lockY) {
      i = o > -s && o < s ? "left" : "right";
    }
    if (!t.lockX) {
      n = o > 0 ? "up" : "down";
    }
    if (t.force > this.options.threshold) {
      var d = {};
      for (var a in this.direction) {
        if (this.direction.hasOwnProperty(a)) {
          d[a] = this.direction[a];
        }
      }
      var p = {};
      this.direction = {
        x: i,
        y: n,
        angle: e
      };
      t.direction = this.direction;
      for (var a in d) {
        if (d[a] === this.direction[a]) {
          p[a] = true;
        }
      }
      if (p.x && p.y && p.angle) {
        return t;
      }
      if (!p.x || !p.y) {
        this.trigger("plain", t);
      }
      if (!p.x) {
        this.trigger("plain:" + i, t);
      }
      if (!p.y) {
        this.trigger("plain:" + n, t);
      }
      if (!p.angle) {
        this.trigger("dir dir:" + e, t);
      }
    }
    return t;
  };
  i.prototype = new t();
  i.constructor = i;
  i.id = 0;
  i.prototype.prepareNipples = function () {
    var t = this;
    var e = t.nipples;
    e.on = t.on.bind(t);
    e.off = t.off.bind(t);
    e.options = t.options;
    e.destroy = t.destroy.bind(t);
    e.ids = t.ids;
    e.id = t.id;
    e.processOnMove = t.processOnMove.bind(t);
    e.processOnEnd = t.processOnEnd.bind(t);
    e.get = function (t) {
      if (t === undefined) {
        return e[0];
      }
      for (var i = 0, n = e.length; i < n; i += 1) {
        if (e[i].identifier === t) {
          return e[i];
        }
      }
      return false;
    };
  };
  i.prototype.bindings = function () {
    var t = this;
    t.bindEvt(t.options.zone, "start");
    t.options.zone.style.touchAction = "none";
    t.options.zone.style.msTouchAction = "none";
  };
  i.prototype.begin = function () {
    var t = this;
    var e = t.options;
    if (e.mode === "static") {
      var i = t.createNipple(e.position, t.manager.getIdentifier());
      i.add();
      t.idles.push(i);
    }
  };
  i.prototype.createNipple = function (t, i) {
    var n = this;
    var o = c.getScroll();
    var r = {};
    var s = n.options;
    if (t.x && t.y) {
      r = {
        x: t.x - (o.x + n.box.left),
        y: t.y - (o.y + n.box.top)
      };
    } else if (t.top || t.right || t.bottom || t.left) {
      var d = document.createElement("DIV");
      d.style.display = "hidden";
      d.style.top = t.top;
      d.style.right = t.right;
      d.style.bottom = t.bottom;
      d.style.left = t.left;
      d.style.position = "absolute";
      s.zone.appendChild(d);
      var a = d.getBoundingClientRect();
      s.zone.removeChild(d);
      r = t;
      t = {
        x: a.left + o.x,
        y: a.top + o.y
      };
    }
    var p = new e(n, {
      color: s.color,
      size: s.size,
      threshold: s.threshold,
      fadeTime: s.fadeTime,
      dataOnly: s.dataOnly,
      restJoystick: s.restJoystick,
      restOpacity: s.restOpacity,
      mode: s.mode,
      identifier: i,
      position: t,
      zone: s.zone,
      frontPosition: {
        x: 0,
        y: 0
      }
    });
    if (!s.dataOnly) {
      c.applyPosition(p.ui.el, r);
      c.applyPosition(p.ui.front, p.frontPosition);
    }
    n.nipples.push(p);
    n.trigger("added " + p.identifier + ":added", p);
    n.manager.trigger("added " + p.identifier + ":added", p);
    n.bindNipple(p);
    return p;
  };
  i.prototype.updateBox = function () {
    var t = this;
    t.box = t.options.zone.getBoundingClientRect();
  };
  i.prototype.bindNipple = function (t) {
    var e;
    var i = this;
    function n(t, n) {
      e = t.type + " " + n.id + ":" + t.type;
      i.trigger(e, n);
    }
    t.on("destroyed", i.onDestroyed.bind(i));
    t.on("shown hidden rested dir plain", n);
    t.on("dir:up dir:right dir:down dir:left", n);
    t.on("plain:up plain:right plain:down plain:left", n);
  };
  i.prototype.pressureFn = function (t, e, i) {
    var n = this;
    var o = 0;
    clearInterval(n.pressureIntervals[i]);
    n.pressureIntervals[i] = setInterval(function () {
      var i = t.force || t.pressure || t.webkitForce || 0;
      if (i !== o) {
        e.trigger("pressure", i);
        n.trigger("pressure " + e.identifier + ":pressure", i);
        o = i;
      }
    }.bind(n), 100);
  };
  i.prototype.onstart = function (t) {
    var e = this;
    var i = e.options;
    t = c.prepareEvent(t);
    e.updateBox();
    function n(t) {
      if (e.actives.length < i.maxNumberOfNipples) {
        e.processOnStart(t);
      }
    }
    c.map(t, n);
    e.manager.bindDocument();
    return false;
  };
  i.prototype.processOnStart = function (t) {
    var e;
    var i = this;
    var n = i.options;
    var o = i.manager.getIdentifier(t);
    var r = t.force || t.pressure || t.webkitForce || 0;
    var s = {
      x: t.pageX,
      y: t.pageY
    };
    var d = i.getOrCreate(o, s);
    if (d.identifier !== o) {
      i.manager.removeIdentifier(d.identifier);
    }
    d.identifier = o;
    function a(e) {
      e.trigger("start", e);
      i.trigger("start " + e.id + ":start", e);
      e.show();
      if (r > 0) {
        i.pressureFn(t, e, e.identifier);
      }
      i.processOnMove(t);
    }
    if ((e = i.idles.indexOf(d)) >= 0) {
      i.idles.splice(e, 1);
    }
    i.actives.push(d);
    i.ids.push(d.identifier);
    if (n.mode !== "semi") {
      a(d);
    } else {
      if (!(c.distance(s, d.position) <= n.catchDistance)) {
        d.destroy();
        i.processOnStart(t);
        return;
      }
      a(d);
    }
    return d;
  };
  i.prototype.getOrCreate = function (t, e) {
    var i;
    var n = this;
    var o = n.options;
    if (/(semi|static)/.test(o.mode)) {
      if (i = n.idles[0]) {
        n.idles.splice(0, 1);
        return i;
      } else if (o.mode === "semi") {
        return n.createNipple(e, t);
      } else {
        console.warn("Coudln't find the needed nipple.");
        return false;
      }
    } else {
      return i = n.createNipple(e, t);
    }
  };
  i.prototype.processOnMove = function (t) {
    var e = this;
    var i = e.options;
    var n = e.manager.getIdentifier(t);
    var o = e.nipples.get(n);
    if (!o) {
      console.error("Found zombie joystick with ID " + n);
      e.manager.removeIdentifier(n);
      return;
    }
    o.identifier = n;
    var r = o.options.size / 2;
    var s = {
      x: t.pageX,
      y: t.pageY
    };
    var d = c.distance(s, o.position);
    var a = c.angle(s, o.position);
    var p = c.radians(a);
    var l = d / r;
    if (d > r) {
      d = r;
      s = c.findCoord(o.position, d, a);
    }
    var u = s.x - o.position.x;
    var f = s.y - o.position.y;
    if (i.lockX) {
      f = 0;
    }
    if (i.lockY) {
      u = 0;
    }
    o.frontPosition = {
      x: u,
      y: f
    };
    if (!i.dataOnly) {
      c.applyPosition(o.ui.front, o.frontPosition);
    }
    var h = {
      identifier: o.identifier,
      position: s,
      force: l,
      pressure: t.force || t.pressure || t.webkitForce || 0,
      distance: d,
      angle: {
        radian: p,
        degree: a
      },
      instance: o,
      lockX: i.lockX,
      lockY: i.lockY
    };
    h = o.computeDirection(h);
    h.angle = {
      radian: c.radians(180 - a),
      degree: 180 - a
    };
    o.trigger("move", h);
    e.trigger("move " + o.id + ":move", h);
  };
  i.prototype.processOnEnd = function (t) {
    var e = this;
    var i = e.options;
    var n = e.manager.getIdentifier(t);
    var o = e.nipples.get(n);
    var r = e.manager.removeIdentifier(o.identifier);
    if (o) {
      if (!i.dataOnly) {
        o.hide(function () {
          if (i.mode === "dynamic") {
            o.trigger("removed", o);
            e.trigger("removed " + o.id + ":removed", o);
            e.manager.trigger("removed " + o.id + ":removed", o);
            o.destroy();
          }
        });
      }
      clearInterval(e.pressureIntervals[o.identifier]);
      o.resetDirection();
      o.trigger("end", o);
      e.trigger("end " + o.id + ":end", o);
      if (e.ids.indexOf(o.identifier) >= 0) {
        e.ids.splice(e.ids.indexOf(o.identifier), 1);
      }
      if (e.actives.indexOf(o) >= 0) {
        e.actives.splice(e.actives.indexOf(o), 1);
      }
      if (/(semi|static)/.test(i.mode)) {
        e.idles.push(o);
      } else if (e.nipples.indexOf(o) >= 0) {
        e.nipples.splice(e.nipples.indexOf(o), 1);
      }
      e.manager.unbindDocument();
      if (/(semi|static)/.test(i.mode)) {
        e.manager.ids[r.id] = r.identifier;
      }
    }
  };
  i.prototype.onDestroyed = function (t, e) {
    var i = this;
    if (i.nipples.indexOf(e) >= 0) {
      i.nipples.splice(i.nipples.indexOf(e), 1);
    }
    if (i.actives.indexOf(e) >= 0) {
      i.actives.splice(i.actives.indexOf(e), 1);
    }
    if (i.idles.indexOf(e) >= 0) {
      i.idles.splice(i.idles.indexOf(e), 1);
    }
    if (i.ids.indexOf(e.identifier) >= 0) {
      i.ids.splice(i.ids.indexOf(e.identifier), 1);
    }
    i.manager.removeIdentifier(e.identifier);
    i.manager.unbindDocument();
  };
  i.prototype.destroy = function () {
    var t = this;
    t.unbindEvt(t.options.zone, "start");
    t.nipples.forEach(function (t) {
      t.destroy();
    });
    for (var e in t.pressureIntervals) {
      if (t.pressureIntervals.hasOwnProperty(e)) {
        clearInterval(t.pressureIntervals[e]);
      }
    }
    t.trigger("destroyed", t.nipples);
    t.manager.unbindDocument();
    t.off();
  };
  n.prototype = new t();
  n.constructor = n;
  n.prototype.prepareCollections = function () {
    var t = this;
    t.collections.create = t.create.bind(t);
    t.collections.on = t.on.bind(t);
    t.collections.off = t.off.bind(t);
    t.collections.destroy = t.destroy.bind(t);
    t.collections.get = function (e) {
      var i;
      t.collections.every(function (t) {
        return !(i = t.get(e));
      });
      return i;
    };
  };
  n.prototype.create = function (t) {
    return this.createCollection(t);
  };
  n.prototype.createCollection = function (t) {
    var e = this;
    var n = new i(e, t);
    e.bindCollection(n);
    e.collections.push(n);
    return n;
  };
  n.prototype.bindCollection = function (t) {
    var e;
    var i = this;
    function n(t, n) {
      e = t.type + " " + n.id + ":" + t.type;
      i.trigger(e, n);
    }
    t.on("destroyed", i.onDestroyed.bind(i));
    t.on("shown hidden rested dir plain", n);
    t.on("dir:up dir:right dir:down dir:left", n);
    t.on("plain:up plain:right plain:down plain:left", n);
  };
  n.prototype.bindDocument = function () {
    var t = this;
    if (!t.binded) {
      t.bindEvt(document, "move").bindEvt(document, "end");
      t.binded = true;
    }
  };
  n.prototype.unbindDocument = function (t) {
    var e = this;
    if (!Object.keys(e.ids).length || t === true) {
      e.unbindEvt(document, "move").unbindEvt(document, "end");
      e.binded = false;
    }
  };
  n.prototype.getIdentifier = function (t) {
    var e;
    if (t) {
      if ((e = t.identifier === undefined ? t.pointerId : t.identifier) === undefined) {
        e = this.latest || 0;
      }
    } else {
      e = this.index;
    }
    if (this.ids[e] === undefined) {
      this.ids[e] = this.index;
      this.index += 1;
    }
    this.latest = e;
    return this.ids[e];
  };
  n.prototype.removeIdentifier = function (t) {
    var e = {};
    for (var i in this.ids) {
      if (this.ids[i] === t) {
        e.id = i;
        e.identifier = this.ids[i];
        delete this.ids[i];
        break;
      }
    }
    return e;
  };
  n.prototype.onmove = function (t) {
    this.onAny("move", t);
    return false;
  };
  n.prototype.onend = function (t) {
    this.onAny("end", t);
    return false;
  };
  n.prototype.oncancel = function (t) {
    this.onAny("end", t);
    return false;
  };
  n.prototype.onAny = function (t, e) {
    var i;
    var n = this;
    var o = "processOn" + t.charAt(0).toUpperCase() + t.slice(1);
    e = c.prepareEvent(e);
    function r(t, e, i) {
      if (i.ids.indexOf(e) >= 0) {
        i[o](t);
        t._found_ = true;
      }
    }
    function s(t) {
      i = n.getIdentifier(t);
      c.map(n.collections, r.bind(null, t, i));
      if (!t._found_) {
        n.removeIdentifier(i);
      }
    }
    c.map(e, s);
    return false;
  };
  n.prototype.destroy = function () {
    var t = this;
    t.unbindDocument(true);
    t.ids = {};
    t.index = 0;
    t.collections.forEach(function (t) {
      t.destroy();
    });
    t.off();
  };
  n.prototype.onDestroyed = function (t, e) {
    var i = this;
    if (i.collections.indexOf(e) < 0) {
      return false;
    }
    i.collections.splice(i.collections.indexOf(e), 1);
  };
  var l = new n();
  return {
    create: function (t) {
      return l.create(t);
    },
    factory: l
  };
});